#!/bin/sh
#
# Copyright (c) 2009-2011 Mark Heily <mark@heily.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

makeconf_version="$Revision$"

c_exports="program version target api cflags"

make_exports="program version target api distfile \
              prefix bindir sbindir libdir includedir mandir \
              cflags ldflags ldadd libdepends \
              sources objs deps mans headers extra_dist subdirs \
              abi_major abi_minor abi_version \
              cc cpp ln ar install diff"

required_headers=
optional_headers=

pre_configure_hook() {
    return
}

post_configure_hook() {
    return
}

export_to_make() {
  for id in $*
  do

    # Prepend $DESTDIR to installation directories
    case "$id" in
        prefix)  
        eval "$id=\"\\\$\\\$DESTDIR\$$id\""
    esac

    uc_id=`echo $id | $tr '[:lower:]' '[:upper:]'`;
    eval "echo \"$uc_id=\"\$$id\"\" >> config.mk"
  done
}

export_to_c() {
  for id in $*
  do
    uc_id=`echo $id | $tr '[:lower:]' '[:upper:]'`;
    eval "echo \"#define $uc_id \\\"\$$id\\\"\" >> config.h"
  done
}

finalize() {
  uc_id=`echo \"$1\" | $tr '[:lower:]' '[:upper:]'`;
  eval "if [ \"\$$1\" = \"\" ] ; then $1=\"$2\" ; fi"
}

# Print the linker relocation path options using the
# appropriate syntax
#
print_rpath() {
    rpath=$1
    
    test -n "$rpath" || return

    if [ `uname` = "SunOS" ] ; then
        echo "-L $rpath -R $rpath"
    else
        echo "-L $rpath -Wl,-rpath,$rpath"
    fi
}

process_argv() {
    for arg in $*
    do
        id=`echo "$arg" | sed 's/=.*//; s/^--//;'`
        val=`echo "$arg" | sed 's/^.*=//'`

        if [ "$arg" = "--makeconf-version" ] ; then
            echo $makeconf_version | sed 's/[^0-9.]//g'
            exit 0
        fi

        if [ "$id" = "generate-rpath" ] ; then
            print_rpath $val
            exit 0
        fi

        if [ "$val" = "" ] ; then val=1 ; fi
        eval "$id=\"$val\"" 
    done
}

process_env() {
    test -n "$CC" && cc="$CC"
    test -n "$CPP" && cpp="$CPP"
    test -n "$CPPFLAGS" && cppflags="$CPPFLAGS"
    test -n "$CFLAGS" && cflags="$CFLAGS"
    test -n "$LN" && ld="$LN"
    test -n "$LDFLAGS" && ldflags="$LDFLAGS"
    test -n "$AR" && ar="$AR"
}
 
check_header() {	 
   sym=`echo "have_$1" | sed 's,[./],_,g'`	 
   uc_sym=`echo "$sym" | $tr '[:lower:]' '[:upper:]'`;
   path=$1

   printf "checking for $path.. "
   if [ -f "/usr/include/$path" ] ; then
     echo "yes"
     echo "#define $uc_sym 1" >> config.h
     eval "$sym=yes"
     return 0
   else  
     echo "no"
     echo "#undef $uc_sym" >> config.h
     eval "$sym=no"
     return 1
   fi
}

# Determine the path to an executable binary
check_binary() {
   id=$1
   shift

   for x in $*
   do
       path=`which $x 2>/dev/null | sed 's/^no .*//'`
       if [ "$path" != "" ] ; then
           eval "$id=\"$path\""
           return
       fi
   done

   echo "not found"
   return
}

check_headers() {	 
   for header in $*
   do
       check_header "$header"
   done
}

check_symbol() {
    header=$1
    symbol=$2

    uc_symbol=`echo "HAVE_$symbol" | $tr '[:lower:]' '[:upper:]' | sed 's,[./],_,g'`
    lc_symbol=`echo "have_$symbol" | $tr '[:upper:]' '[:lower:]' | sed 's,[./],_,g'`

    if [ -f "$header" ] ; then
        path="$header"
    elif [ -f "/usr/include/$header" ] ; then
        path="/usr/include/$header"
    else
        echo "*** ERROR: Cannot find <$header>"
        exit 1
    fi
     
    printf "checking $header for $symbol.. "    
    if [ "`grep $symbol $path`" != "" ] ; then
     eval "$lc_symbol=yes"
     echo "#define $uc_symbol 1" >> config.h
     echo "yes"
     return 0
    else
     eval "$lc_symbol=no"
     echo "no"
     echo "#undef $uc_symbol" >> config.h
     return 1
    fi
}

check_install() {
    printf "checking for a BSD-compatible install.. "
    if [ "`uname -s`" = "SunOS" ] ; then
        default_install=/usr/ucb/install
    else
        default_install=/usr/bin/install
    fi
    finalize install "$default_install"
    echo "$install"
}

check_target() {
    printf "checking operating system type.. "
    default_target=`uname -s | $tr '[:upper:]' '[:lower:]'`
    default_api="posix"
    case "$default_target" in
    sunos)
            default_target="solaris"
            ;;
    "gnu/kfreebsd")
            default_target="freebsd"
            ;;
    "mingw*")
            default_target="windows"
            default_api="windows"
            ;;
    esac
    finalize target "$default_target"
    finalize api "$default_api"
    echo "$api-$target"
}

check_compiler() {
    printf "checking for a C compiler.. "
    if [ "$cc" = "" ] ; then
        check_binary default_cc cc gcc clang
        finalize cc "$default_cc"
        test -x "$cc" || err "Unable to locate a C compiler"
        echo "$cc"
    else
        echo "$cc (set by the CC environment variable)"
    fi
}

check_archiver() {
    printf "checking for a suitable archiver.. "
    if [ "$ar" = "" ] ; then
        check_binary default_ar ar gar
        finalize ar "$default_ar"
        test -x "$ar" || err "Unable to locate an archiver"
        echo "$ar"
    else
        echo "$ar (set by the AR environment variable)"
    fi
}

err() {
    echo "*** ERROR *** $*"
    rm -f config.mk $program.pc config.h
    exit 1
}

check_diff() {
    # TODO: Support non-GNU diff syntax
    # TODO: Search for the command
    printf "checking for a suitable diff(1) command.. "
    finalize diff "diff -ruN -dEbwBp -x .svn -x .o -x config.h -x config.mk"
    echo "found"
}

subst_vars() {
  outfile=$1

  if [ ! -f "${outfile}.in" ] ; then
      return
  fi

  echo "Creating $outfile"
  rm -f $outfile
  sed -e "
       s,@@CWD@@,`pwd`,g;
       s,@@PROGRAM@@,$program,g;
       s,@@VERSION@@,$version,g;
       s,@@PREFIX@@,$prefix,g;
       s,@@LIBDIR@@,$libdir,g;
       s,@@INCLUDEDIR@@,$includedir,g;
       s,@@MANDIR@@,$mandir,g;
       s,@@LIBDEPENDS@@,$libdepends,g;
       s,@@PKG_SUMMARY@@,$pkg_summary,g;
       s,@@RPM_DATE@@,`date +'%a %b %d %Y'`,g;
       s,@@PKG_DESCRIPTION@@,$pkg_description,g;
       s,@@LICENSE@@,$license,g;
       s,@@AUTHOR@@,$author,g;
       " < ${outfile}.in > $outfile
  chmod 400 $outfile
}

#######################################################################
#
#                           MAIN()
#
#######################################################################

# Workaround for Solaris "Bad string" issue when LOCALE is undefined
tr="/usr/bin/tr"
test -f /usr/xpg4/bin/tr && tr="/usr/xpg4/bin/tr"

. ./config.inc

process_argv "$*"
process_env

# Initialize the output files
#
for output_file in config.mk
do
   rm -f $output_file
   echo "# AUTOMATICALLY GENERATED -- DO NOT EDIT" > $output_file
done
if [ "$sources" != "" ] ; then
   rm -f config.h
   echo "/* AUTOMATICALLY GENERATED -- DO NOT EDIT */" > config.h
fi

check_target
check_compiler
check_archiver
check_install
check_diff

finalize program    "$program"
finalize version    "$version"
# FIXME: make per-target
#finalize abi_major  "$abi_major"
#finalize abi_minor  "$abi_minor"
#finalize abi_version "$abi_major.$abi_minor"
finalize prefix     "/usr/local"
finalize bindir     "\\\$(PREFIX)/bin"
finalize sbindir    "\\\$(PREFIX)/sbin"
finalize libdir     "\\\$(PREFIX)/lib"
finalize includedir "\\\$(PREFIX)/include"
finalize mandir     "\\\$(PREFIX)/share/man"
finalize cflags     "$cflags"
finalize libdepends "$libdepends"
finalize ldadd      ""
finalize ldflags    ""
finalize deps       ""
finalize ln         "`which ln`"
finalize distfile   "$program-$version.tar.gz" 

pre_configure_hook

for header in $required_headers
do
  check_header "$header" || err "$header is required, but cannot be found."
done
check_headers $optional_headers

post_configure_hook

objs="`echo \"$sources\" | sed 's/\.c/\.o/g'`"

subst_vars "$program.pc"
subst_vars "$program.la"
if [ "$target" = "linux" ] ; then
  subst_vars "rpm.spec"
fi

if [ "$sources" != "" ] ; then
    echo "Creating config.h"
    export_to_c $c_exports
fi

echo "Creating config.mk"
export_to_make "$make_exports"

cleanfiles=""
    echo "$x " 
for x in $targets
do
    dest=`echo $x | sed 's/:.*//'`
    sources=`echo $x | sed 's/^.*://' | tr ',' ' '`
    cleanfiles="$cleanfiles $dest"

    if [ "$target" = "solaris" ] ; then
         extra_ldflags="-m64 -R /usr/sfw/lib/amd64"
    fi

    if [ "`echo "$dest" | egrep '\\.so\$'`" = "$dest" ] ; then
      #FIXME:
      #abi_major=???
      #abi_minor=???
      #cflags="-o $program.so.$abi_major.$abi_minor $ldflags"

      if [ "$target" != "solaris" ] ; then
         extra_ldflags="$extra_ldflags -Wl,-export-dynamic -Wl,-soname,$dest"
      fi

      printf "\n$dest: $sources \$(${dest}_DEPENDS)\n\t\$(CC) -shared \$(CFLAGS) \$(${dest}_CFLAGS) $extra_ldflags \$(LDFLAGS) \$(${dest}_LDFLAGS) -o $dest $sources\n" >> config.mk
    else
       rpath_flags='`./configure --generate-rpath=$('$dest'_RPATH) ; ./configure --generate-rpath="$(RPATH)"`'

      printf "\n$dest: $sources \$(${dest}_DEPENDS)\n\t\$(CC) \$(CFLAGS) \$(${dest}_CFLAGS) \$(LDFLAGS) $extra_ldflags $rpath_flags \$(${dest}_LDFLAGS) -o $dest $sources \$(LDADD) \$(${dest}_LDADD)\n" >> config.mk
    fi
done

printf "\nall: $cleanfiles\n" >> config.mk
printf "\nclean:\n\trm -f $cleanfiles\n" >> config.mk

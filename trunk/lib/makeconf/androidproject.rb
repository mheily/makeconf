class AndroidProject < BaseProject

  attr_accessor :ndk_toolchain_version 

  def initialize(options)
    super(options)

    @ndk_toolchain_version = nil
    @ndk_path = nil
    @sdk_path = nil
  end

  # Parse ARGV options
  # Should only be called from Makeconf.parse_options()
  def parse_options(opts)
    super(opts)

    opts.separator ""
    opts.separator "Android options:"

    opts.on('--with-ndk=DIRECTORY', "Path to the Android NDK") do |arg|
       @ndk_path = arg
    end
    opts.on('--with-sdk=DIRECTORY', "Path to the Android SDK") do |arg|
       @sdk_path = arg
    end

  end

  def to_make

### FIXME: this belongs in a validate_opts() stage after parse_opts()
    printf 'checking for the Android NDK.. '
    throw 'Unable to locate the NDK. Please set the --with-ndk variable to the correct path' if @ndk_path.nil?
    puts @ndk_path
    printf 'checking for the Android SDK.. '
    throw 'Unable to locate the SDK. Please set the --with-sdk variable to the correct path' if @sdk_path.nil?
    puts @sdk_path
###
    write_android_mk
    write_application_mk

    # Generate the ndk-build command
    ndk_build = '$(NDK)/ndk-build V=1 NDK_DEBUG=1 NDK_PROJECT_PATH=.'
    unless @ndk_toolchain_version.nil?
      ndk_build += " NDK_TOOLCHAIN_VERSION=#{@ndk_toolchain_version}"
    end

    mf = super
    mf.define_variable('NDK', '?=', @ndk_path)
    mf.define_variable('SDK', '?=', @sdk_path)
    mf.define_variable('ADB', '?=', '$(SDK)/platform-tools/adb')
    mf.target('all').rules.push ndk_build

    # Generate the 'make check' target
    mf.target('check').deps = []        # FIXME: should depend on 'all'
    mf.target('check').rules = []
    @build.each do |obj|
      if obj.kind_of?(Test)
        mf.target('check').rules.push([
          '$(ADB) push libs/armeabi/' + obj.output + ' /data',
          '$(ADB) shell /data/' + obj.output
          ])
        mf.target('clean').rules.push('$(ADB) shell rm /data/' + obj.output)
      end
    end

    mf
  end

private

  # Create the Android.mk makefile
  def write_android_mk
    ofile = 'Android.mk'
    buf = [
      '# Automatically generated by ./configure -- do not edit',
      'LOCAL_PATH := $(call my-dir)',
      '',
    ]

    @build.each do |obj|
      next if obj.kind_of? Header
      next if obj.kind_of? ExternalProject 
      buf.push 'include $(CLEAR_VARS)',
            '';

      id = obj.id
      id += '_static' if obj.kind_of? StaticLibrary
      id += '_shared' if obj.kind_of? SharedLibrary
      buf.push "LOCAL_MODULE    := #{id}"
      buf.push "LOCAL_SRC_FILES := " + obj.sources.join(' ')
      buf.push "LOCAL_CFLAGS    := " + obj.cflags.join(' ')
      buf.push translate_ldadd(obj.ldadd) if obj.ldadd
      buf.push ''
      case obj.class.to_s
      when 'StaticLibrary'
        buf.push 'include $(BUILD_STATIC_LIBRARY)'
      when 'SharedLibrary'
        buf.push 'include $(BUILD_SHARED_LIBRARY)'
      when 'Binary', 'Test'
        buf.push 'include $(BUILD_EXECUTABLE)'
      else
        throw "Unsuported class #{obj.class}"
      end
      buf.push ''
    end

    puts 'creating ' + ofile
    f = File.open(ofile, 'w')
    buf.each do |str|
      f.printf "#{str}\n" 
    end
    f.close
  
  end

  # Create the jni/Application.mk makefile
  def write_application_mk
    ofile = 'jni/Application.mk'
    buf = [
      '# Automatically generated by ./configure -- do not edit',
      'APP_PROJECT_PATH := .',
      'APP_BUILD_SCRIPT := $(APP_PROJECT_PATH)/Android.mk',
      'APP_PLATFORM     := android-14',
      'APP_OPTIM        := debug',
    ]

    Dir.mkdir 'jni' unless File.exists?('jni')
    puts 'creating ' + ofile
    f = File.open(ofile, 'w')
    buf.each do |str|
      f.printf "#{str}\n" 
    end
    f.close
  end

  # Translate LDADD flags into the corresponding Android.mk variables
  def translate_ldadd(ldadd)
     static_libs = []
     # TODO: shared libs
     ldadd.each do |item|
       if item =~ /\.a$/
          # FIXME: assumes it is built locally
          static_libs.push item.sub(/\.a$/, '_static')
       end
     end
     
     buf = ''
     buf += 'LOCAL_STATIC_LIBRARIES := ' + static_libs.join(' ') if static_libs
     buf
  end

private

  # Determine the path to the Android NDK
  def find_ndk()
    [ ENV['NDK'] ].each do |x|
      if !x.nil? and File.exists?(x)
        return x
      end
    end
    nil
  end

end

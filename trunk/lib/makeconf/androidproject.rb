class AndroidProject < BaseProject

  attr_accessor :ndk_toolchain_version, :target_arch_abi, :target_platform

  def initialize(options)
    super(options)

    # Public
    @ndk_toolchain_version = '4.6'
    @target_platform = 'android-14'
    @target_arch_abi = 'armeabi'
    @ndk_path = nil
    @sdk_path = nil

    # Private
    @prebuilt_libs = []
  end

  # Parse ARGV options
  # Should only be called from Makeconf.parse_options()
  def parse_options(opts)
    super(opts)

    opts.separator ""
    opts.separator "Android options:"

    opts.on('--with-ndk=DIRECTORY', "Path to the Android NDK") do |arg|
       @ndk_path = arg
    end
    opts.on('--with-sdk=DIRECTORY', "Path to the Android SDK") do |arg|
       @sdk_path = arg
    end

  end

  def to_make

### FIXME: this belongs in a validate_opts() stage after parse_opts()
    printf 'checking for the Android NDK.. '
    throw 'Unable to locate the NDK. Please set the --with-ndk variable to the correct path' if @ndk_path.nil?
    puts @ndk_path
    printf 'checking for the Android SDK.. '
    throw 'Unable to locate the SDK. Please set the --with-sdk variable to the correct path' if @sdk_path.nil?
    puts @sdk_path
###
    write_android_mk
    write_application_mk

    # Generate the ndk-build command
    ndk_build = '$(NDK)/ndk-build V=1 NDK_DEBUG=1 NDK_PROJECT_PATH=.'
    unless @ndk_toolchain_version.nil?
      ndk_build += " NDK_TOOLCHAIN_VERSION=#{@ndk_toolchain_version}"
    end

    mf = super

    #FIXME -overwrites @cc as set by Compiler
# XXX-hardcoded to ARM, linux-x86
    mf.define_variable('CC', ':=', @ndk_path +
       '/toolchains/arm-linux-androideabi-' +
       @ndk_toolchain_version +
       '/prebuilt/linux-x86/bin/arm-linux-androideabi-gcc'
            ) 

    # XXX-hardcoded ARM
    mf.define_variable('NDK_LIBDIR', ':=', 
            '$(NDK)/platforms/' + @target_platform + '/arch-arm/usr/lib/')

    mf.define_variable('NDK', '?=', @ndk_path)
    mf.define_variable('SDK', '?=', @sdk_path)
    mf.define_variable('ADB', '?=', '$(SDK)/platform-tools/adb')
    mf.target('all').rules.push ndk_build

    # Generate the 'make clean' target
    mf.target('clean').rules = [ ndk_build + ' clean' ]

    # Generate the 'make check' target
    mf.target('check').deps = []        # FIXME: should depend on 'all'
    @build.each do |obj|
      if obj.kind_of?(Test)
        mf.target('check').rules.push([
          '$(ADB) push libs/' + @target_arch_abi + '/' + obj.output + ' /data/local/tmp',
          '$(ADB) shell chmod 751 /data/local/tmp/' + obj.output,
          '$(ADB) shell /data/local/tmp/' + obj.output,
          '$(ADB) shell rm /data/local/tmp/' + obj.output
          ])
      end
    end

    mf
  end

private

  # Create the Android.mk makefile
  def write_android_mk
    ofile = 'Android.mk'
    buf = [
      '# Automatically generated by ./configure -- do not edit',
      '',
      'TARGET_PLATFORM := ' + @target_platform,
      'TARGET_ARCH_ABI := ' + @target_arch_abi,
      'LOCAL_PATH := $(call my-dir)',
      '',
    ]

    @build.each do |obj|
      next if obj.kind_of? Header
      next if obj.kind_of? ExternalProject 
      buf.push 'include $(CLEAR_VARS)',
            '';

      id = obj.id
      id += '-static' if obj.kind_of? StaticLibrary

      buf.push "LOCAL_MODULE    := #{id}"
      buf.push "LOCAL_MODULE_FILENAME := #{obj.id}" if obj.kind_of? StaticLibrary
      buf.push "LOCAL_SRC_FILES := " + obj.sources.join(' ')
      buf.push "LOCAL_CFLAGS    := " + obj.cflags.join(' ')
      buf.push translate_ldadd(obj.ldadd) if obj.ldadd
      buf.push ''
      case obj.class.to_s
      when 'StaticLibrary'
        buf.push 'include $(BUILD_STATIC_LIBRARY)'
      when 'SharedLibrary'
        buf.push 'include $(BUILD_SHARED_LIBRARY)'
      when 'Binary', 'Test'
        buf.push 'include $(BUILD_EXECUTABLE)'
      else
        throw "Unsuported class #{obj.class}"
      end
      buf.push ''
    end

    buf.push prebuilt_libraries

    puts 'creating ' + ofile
    f = File.open(ofile, 'w')
    buf.each do |str|
      f.printf "#{str}\n" 
    end
    f.close
  
  end

  # Create the jni/Application.mk makefile
  def write_application_mk
    ofile = 'jni/Application.mk'
    buf = [
      '# Automatically generated by ./configure -- do not edit',
      'APP_PROJECT_PATH := .',
      'APP_BUILD_SCRIPT := $(APP_PROJECT_PATH)/Android.mk',
      'APP_PLATFORM     := ' + @target_platform,
      'APP_OPTIM        := debug',
    ]

    Dir.mkdir 'jni' unless File.exists?('jni')
    puts 'creating ' + ofile
    f = File.open(ofile, 'w')
    buf.each do |str|
      f.printf "#{str}\n" 
    end
    f.close
  end

private

  # Translate LDADD flags into the corresponding Android.mk prebuilt definitions
  def prebuilt_libraries
    buf = []
    @build.each do |obj|
    # TODO: shared libs
      obj.ldadd.each do |item|
        prebuilt = File.basename(item).sub(/\.a$/, '-prebuilt')
        if item =~ /\.a$/ and item =~ /\// and not @prebuilt_libs.include? prebuilt
           # FIXME: assumes it is a prebuilt library in a different path
           buf.push('',
              'include $(CLEAR_VARS)',
              'LOCAL_MODULE := ' + File.basename(item).sub(/\.a$/, '-prebuilt'),
              'LOCAL_SRC_FILES := ' + item,
              'include $(PREBUILT_STATIC_LIBRARY)'
              )
           @prebuilt_libs.push prebuilt
        end
      end
    end
    buf.join "\n"
  end

  # Translate LDADD flags into the corresponding Android.mk variables
  def translate_ldadd(ldadd)
     static_libs = []
     # TODO: shared libs
     ldadd.each do |item|
       if item =~ /\.a$/ 
          if item =~ /\//
            static_libs.push File.basename(item).sub(/\.a$/, '-prebuilt')
          else
            static_libs.push File.basename(item).sub(/\.a$/, '-static')
          end
       end
     end
     
     buf = ''
     buf += 'LOCAL_STATIC_LIBRARIES := ' + static_libs.join(' ') if static_libs
     buf
  end
  # Determine the path to the Android NDK
  def find_ndk()
    [ ENV['NDK'] ].each do |x|
      if !x.nil? and File.exists?(x)
        return x
      end
    end
    nil
  end

end
